import bicis.*
import accesorios.*
import deposito.*

describe "Test deposito de bicis" {
	
	const ciudadGotica = new Depositos()
	const bici1 = new Bicis(rodado = 28, largo = 150, marca = "Olmo")
	const bici2 = new Bicis(rodado = 26, largo = 110,marca = "Legnano")
	const bici3 = new Bicis(rodado = 20, largo = 90, marca = "Legnano")
	
	const farolito1 = new Farolito()
	const farolito2 = new Farolito()
	const canasto2 = new Canasto(volumen = 8)
	const morral2 = new Morral(largo = 21, tieneOjoDeGato = true)
	const morral3 = new Morral(largo = 6, tieneOjoDeGato = false)
	
fixture{
	bici1.ponerAccesorio(farolito1)
	bici2.ponerAccesorio(farolito2)
	bici2.ponerAccesorio(canasto2)
	bici2.ponerAccesorio(morral2)
	bici3.ponerAccesorio(morral3)
	ciudadGotica.guardarBici(bici1)
	ciudadGotica.guardarBici(bici2)
	ciudadGotica.guardarBici(bici3)
	}
	
test"Bici1" {
	assert.equals(85,bici1.altura())
	assert.equals(34,bici1.velocidadCrucero())
	assert.equals(0, bici1.carga())
	assert.equals(14.5, bici1.peso())
	assert.that(bici1.tieneLuz())
	assert.equals(1,bici1.accesoriosLivianos())
	}
	
test"Bici2" {
	assert.equals(80,bici2.altura())
	assert.equals(28,bici2.velocidadCrucero())
	assert.equals(15.5, bici2.peso())
	assert.equals(23, bici2.carga())
	assert.that(bici2.tieneLuz())
	assert.equals(2,bici2.accesoriosLivianos())
	}
	
test"Bici3" {
	assert.equals(65,bici3.altura())
	assert.equals(22,bici3.velocidadCrucero())
	assert.equals(2, bici3.carga())
	assert.equals(11.2, bici3.peso())
	assert.notThat(bici3.tieneLuz())
	assert.equals(0,bici3.accesoriosLivianos())
	}
	
test "Deposito"{
	assert.equals([bici1,bici2],ciudadGotica.bicisRapidas())
	assert.equals(#{"Olmo","Legnano"},ciudadGotica.marcaDeBicis())
	assert.notThat(ciudadGotica.esNocturno())
	assert.that(ciudadGotica.tieneBiciQueCarga(5))
	assert.notThat(ciudadGotica.tieneBiciQueCarga(100))
	}
}